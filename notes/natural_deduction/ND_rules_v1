HYPOTHESIS RULE:

------------------- hyp
G, x : A |- x : A




SET LEVELS:

------------------------ Level-form
G |- Level : Set lzero 


--------------------- Level-intro1
G |- lzero : Level


G |- l : Level
--------------------- Level-intro2
G |- lsuc l : Level


G |- l : Level 
G |- i : Level 
G, x : Level |- C : Set i 
G |- c : C[lzero]  
G, m : Level, cm : C[x\m] |- d : C[x\(lsuc m)]
------------------------------------------------- Level-elim
G |- level-rec l {}.c {m,cm}.d : C[x\l]



G |- lzero : Level 
G |- i : Level 
G, x : Level |- C : Set i 
G |- c : C[lzero] 
G, m : Level, cm : C[x\m] |- d : C[x\(lsuc m)]
----------------------------------------------------------------- Level-comp1
G |- level-rec lzero {}.c {m,cm}.d = c[] : C[x\lzero]


G |- lsuc l : Level
G |- i : Level
G, x : Level |- C : Set i   
G |- c : C[lzero]        
G, m : Level, cm : C[x\m] |- d : C[x\(lsuc m)]
G |- level-rec l {}.c {x}.d = y : C
----------------------------------------------------------------- Level-comp2
G |- level-rec (lsuc l) {}.c {m,cm}.d = d[m\l,cm\y] : C[x\(lsuc l)]


G |- l : Level
--------------------------- Level-set
G |- Set l : Set (lsuc l)


G |- m : Level
G |- n : Level
---------------------- Level-max
G |- lmax m n : Level


G |- l : Level
------------------------------ Level-max-comp1
G |- lmax lzero l = l : Level 


G |- l : Level
------------------------------ Level-max-comp2
G |- lmax l lzero = l : Level


G |- (lsuc m) : Level
G |- (lsuc n) : Level
G |- lmax m n = y : Level
----------------------------------------------- Level-max-comp3
G |- lmax (lsuc m) (lsuc n) = y : Level




FALSE:

----------------------------- False-form
G |- False : Set lzero


G |- p : False   
G |- i : Level
G, x : False |- C : Set i
----------------------------- False-elim
G |- False-elim p :  C[x\p]





TRUE:

---------------------- True-form
G |- True : Set lzero


------------------------- True-intro
G |- True-intro :  True


G |- p : True
G |- i : Level    
G, x : True |- C : Set i   
G |- c : C[x\True-intro]
-------------------------------- True-elim
G |- True-rec p {}.c : C[x\p]


G |- i : Level   
G, x : True |- C : Set i   
G |- c : C[x\True-intro]
-------------------------------------------------------- True-comp
G |- True-rec True-intro {}.c = c[] : C[x\True-intro]




IMPLICATION:

G |- i : Level
G |- j : Level
G |- A : Set i         
G |- B : Set j
------------------------------------------------- -> form
G |-  A -> B : Set (lmax i j)

             
G |- i : Level
G |- A -> B : Set i     
G, x : A |- b : B 
-------------------------------------------------   -> intro
G |- {x}.b : A -> B


G |- f : A -> B   
G |- a : A
------------------------------ -> elim
G |- (app f a) : B 


G |- {x}.b : A -> B         
G |- a : A
-------------------------------------------- -> comp
G |- (app {x}.b a) = b[x\a] : B





CONJUNCTION (NEGATIVE):

G |- i : Level
G |- j : Level
G |- A : Set i        
G |- B : Set j
---------------------------------------------- &-form
G |- A & B : Set (lmax i j)


G |- a : A          
G |- b : B
------------------------------- & intro
G |- (a , b) :  A & B


G |- p : A & B
--------------- & elim1
G |- fst p : A


G |- p : A & B
--------------- & elim2
G |- snd p : B


G |- (a , b) : A & B
-------------------------- &-comp1
G |- fst (a , b) = a : A


G |- (a , b) : A & B
-------------------------- &-comp2
G |- snd (a , b) = b : B




CONJUNCTION (POSITIVE):

G |- i : Level
G |- j : Level
G |- A : Set i          
G |- B : Set j
------------------------------ &p-form
G |- A & B : Set (lmax i j)


G |- i : Level
G |- A & B : Set i    
G |- a : A          
G |- b : B
-------------------------------- &p-intro
G |- (a , b) : A & B


G |- p : A & B
G |- i : Level
G, q : A & B |- C : Set i    
G, x : A, y : B |- c : C[q\(x,y)]
----------------------------------- &p-elim
G |- split p {x,y}.c : C[q\p]


G |- (a , b) : A & B
G |- i : Level
G, q : A & B |- C : Set i  
G, x : A, y : B |- c : C
------------------------------------------------------- &p-comp
G |- split (a , b) {x,y}.c = c[x\a,y\b] : C[q\(a , b)]




DISJUNCTION :

G |- i : Level
G |- j : Level
G |- A : Set i         
G |- B : Set j
-----------------------------------OR-form
G |- A OR B : Set (lmax i j)


G |- i : Level
G |- A OR B : Set i    
G |- a : A 
----------------------------- OR-intro1
G |- (inl a) : A OR B


G |- i : Level
G |- A OR B : Set i    
G |- b : B
----------------------------------------- OR-intro2
G |- (inr b) : A OR B


G |- p : A OR B       
G |- i : Level
G, q : A OR B |- C : Set i  
G, x : A |- c : C[q\(inl x)]          
G, y : B |- d : C[q\(inr y)]
---------------------------------------- OR-elim
G |- case p {x}.c {y}.d : C[q\p]


G |- case (inl a) {x}.c {y}.d : C[q\(inl a)]
------------------------------------------------------ OR-comp1
G |- case (inl a) {x}.c {y}.d = c[x\a] : C[q\(inl a)]


G |- case (inr b) {x}.c {y}.d : C[q\(inr b)]
------------------------------------------------------ OR-comp2
G |- case (inr b) {x}.c {y}.d = d[y\b] : C[q\(inr b)]




EXISTENTIAL QUANTIFICATION:

G |- i : Level
G |- j : Level
G |- A : Set i         
G, x : A |- B : Set j
------------------------------------------- EQ-form
G |- Exists A {x}.B : Set (lmax i j)


G |- i : Level
G |- Exists A {x}.B : Set i    
G |- a : A        
G |- b : B[x\a]
------------------------------------ EQ-intro
G |- pair a b : Exists A {x}.B



G |- p : Exists A {x}.B       
G |- i : Level
G, q : Exists A {x}.B |- C : Set i    
G, a : A, b : B[x\a] |- c : C[q\(a,b)]
------------------------------------------- EQ-elim
G |- Exists-rec p {a,b}.c : C[q\p]


G |- i : Level
G, p : Exists A {x}.B |- C : Set i
G |- Exists-rec (x , y) {a,b}.c : C[q\(x , y)]
-------------------------------------------------------------- EQ-comp
G |- Exists-rec (x , y) {a,b}.c = c[a\x,b\y] : C[q\(x , y)]






UNIVERSAL QUANTIFICATION:

G |- i : Level
G |- j : Level
G |- A : Set i         
G, x : A |- B : Set j
------------------------------------------------------ UQ-form
G |- Forall A {x}.B : Set (lmax i j)


G |- i : Level
G |- Forall A {x}.B : Set i       
G, x : A |- b : B
-------------------------------- UQ-intro
G |- {x}.b : Forall A {x}.B


G |- f : Forall A {x}.B          
G |- a : A
-------------------------------- UQ-elim
G |- (App f a) : B[x\a]


G |- (App {x}.b a) : B[x\a]
-------------------------------------- UQ-comp
G |- (App {x}.b a) = b[x\a] : B[x\a]



IDENTITY:

G |- i : Level
G |- A : Set i      
G |- x : A     
G |- y : A
------------------------------- Id-form
G |- Id A x y : Set i


G |- i : Level
G |- A : Set i      
G |- x : A
------------------------------- Id-intro
G |- refl : Id A x x


G |- p : Id A x y       
G |- i : Level
G, r : Id A x y |- C : Set i    
G, refl : Id A x x |- c : C[r\refl]
--------------------------------------- Id-elim
G |- Id-elim p c : C[r\p]


G |- refl : Id A x y 
------------------------------------- Id-comp
G |- Id-elim refl c = c : C[r\refl]

   

BOOL:

-------------------- Bool-form
G |- Bool : Set


-------------------- Bool-intro1
G |- true : Bool


-------------------- Bool-intro2
G |- false : Bool


G |- p : Bool     
G |- i : Level
G, x : Bool |- C : Set i      
G |- c : C[x\true]         
G |- d : C[x\false]
-------------------------------------- Bool-elim
G |- if p then {}.c else {}.d : C[x\p]



G |- i : Level
G, x : Bool |- C : Set i
G |- if true then c else d : C[x\true]
--------------------------------------------- Bool-comp1
G |- if true then {}.c else {}.d = c[] : C[x\true]


G |- i : Level
G, x : Bool |- C : Set i
G |- if false then c else d : C[x\false]
--------------------------------------------- Bool-comp2
G |- if false then {}.c else {}.d = d[] : C[x\false]







NAT:

------------------------ Nat-form
G |- Nat : Set lzero


------------------------- Nat-intro1
G |- zero : Nat


G |- n : Nat
------------------------- Nat-intro2
G |- (suc n) : Nat


G |- n : Nat    
G |- i : Level      
G, x : Nat |- C : Set i      
G |- cz : C[x\zero]        
G, m : Nat, cm : C[x\m] |- cm' : C[x\(suc m)]
-------------------------------------------------- Nat-elim
G |- nat-rec n {}.cz {m,cm}.cm' : C[x\n]


G |- i : Level
G, x : Nat |- C : Set i    
G |-  nat-rec zero cz {m,cm}.cn' : C[x\zero]
------------------------------------------------------- Nat-comp1
G |- nat-rec zero {}.cz {m,cm}.cn' = cz[] : C[x\zero]


G |- i : Level
G, x : Nat |- C : Set i   
G |-  nat-rec (suc n) cz {m,cm}.cn' : C[x\(suc n)]     
G |- nat-rec n {}.cz {m,cm}.cn' = y : C[x\n]
--------------------------------------------------------------------- Nat-comp2
G |- nat-rec (suc n) {}.cz {m,cm}.cn' = cn'[m\n,cm\y] : C[x\(suc n)]

